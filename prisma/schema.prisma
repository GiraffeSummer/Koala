generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid           String    @id @db.VarChar(45)
  name          String?   @db.LongText
  discriminator String?   @default("0") @db.VarChar(4)
  lvl           Int?      @default(0)
  reputation    Int?      @default(0)
  toLvl         Int?      @default(11)
  married       Boolean?  @default(false)
  admin         Boolean?  @default(false)
  status        String?   @default("Hey there!") @db.LongText
  timestamp     DateTime? @default(now())
  lvlMessage    String?   @default("") @db.LongText
  bot           Boolean?  @default(false)
  balance       BigInt?   @default(1000)

  lootTimer  DateTime? @default("2000-01-01T00:00:00+00:00")
  guessTimer DateTime? @default("2000-01-01T00:00:00.000Z")

  partnerId String?
  partner   User?   @relation("parent", fields: [partnerId], references: [uid])
  users     User[]  @relation("parent")

  badges        badge_inventory[]
  Badge         Badge?            @relation(fields: [selectedBadge], references: [id])
  selectedBadge Int?
  items         item_inventory[]

  commands    commandLog[]
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime       @updatedAt
  suggestions suggestions[]
  pronouns    pronoun_list[]
}

model badge_inventory {
  userid  String
  badgeid Int

  user  User  @relation(fields: [userid], references: [uid])
  badge Badge @relation(fields: [badgeid], references: [id])
  @@id([userid, badgeid])
}

model Badge {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(100)
  badge           String?           @db.VarChar(100)
  description     String?           @db.VarChar(255)
  User            User[]
  badge_inventory badge_inventory[]
  Reward          Reward[]
}

model item_inventory {
  userid String
  itemid Int
  amount Int?

  user User @relation(fields: [userid], references: [uid])
  item Item @relation(fields: [itemid], references: [id])
  @@id([userid, itemid])
}

model Item {
  id     Int     @id @default(autoincrement())
  name   String? @db.VarChar(100)
  symbol String? @db.VarChar(100)

  item_inventory item_inventory[]
}

model Reward {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(100)

  Badge Badge? @relation(fields: [badge], references: [id])
  badge Int?
  exp   Int?   @default(0)

}

model aboutus {
  id       String  @id @db.VarChar(20)
  nickname String? @db.VarChar(100)
  order    Int?    @default(999)
  jobs     String? @db.VarChar(100)
  details  String? @db.VarChar(255)
}

//model commands {
//  id            Int      @id @default(autoincrement()) @map("_id")
//  active        Boolean? @default(true)
//  command       String?  @db.VarChar(100)
//  description   String?  @db.Text
//  command_usage String?  @db.Text
//  nsfw          Boolean? @default(false)
//  admin         Boolean? @default(false)
//  serveradmin   Boolean? @default(false)
//  aliases       String?  @db.VarChar(200)
//}

model Command {
  id          Int               @id @default(autoincrement()) @map("_id")
  command     String?           @db.VarChar(100)
  description String?           @db.Text
  type        String?           @default("CHAT_INPUT") @db.VarChar(100)
  exp         Int               @default(1)
  ephemeral   Boolean?          @default(false)
  noDefer     Boolean?          @default(false)
  options     command_options[]
}

model command_options {
  commandid Int
  optionid  Int

  command Command        @relation(fields: [commandid], references: [id])
  option  CommandOptions @relation(fields: [optionid], references: [id])
  @@id([commandid, optionid])
}

model CommandOptions {
  id          Int     @id @default(autoincrement())
  type        String? @db.VarChar(100)
  name        String? @db.VarChar(100)
  description String? @db.Text
  //options     command_options[] @re
  //choices

  commands command_options[]
}

model fortune {
  id           Int     @id @default(autoincrement())
  fortune_line String? @db.VarChar(255)
}

model magic8 {
  id      Int     @id @default(autoincrement())
  message String? @db.VarChar(100)
}

model pickup {
  id          Int      @id @default(autoincrement())
  pickup      String?  @db.Text
  includename Boolean? @default(false)
}

model servers {
  id                  String   @id @db.VarChar(45)
  name                String?  @db.LongText
  prefix              String?  @default("!") @db.VarChar(45)
  lvlmessages         Boolean? @default(true)
  levelchannel        String?  @db.VarChar(45)
  repTimeout          Int?     @default(72000)
  joinLeaveMsg        Boolean? @default(false)
  joinLeaveChannel    String?  @db.VarChar(45)
  adminLogging        Boolean? @default(false)
  adminLoggingChannel String?  @db.VarChar(45)
  autorole            String?  @db.VarChar(45)
  censorlvlmessage    Boolean? @default(false)
  warnkick            Boolean? @default(false)
  warnkicks           Int?     @default(3)
  muterole            String?  @db.VarChar(45)
}

model topics {
  id    Int     @id @default(autoincrement())
  topic String? @db.VarChar(250)
}

model warnings {
  id      Int     @id @default(autoincrement())
  userid  String? @db.VarChar(45)
  guildid String? @db.VarChar(45)
  admin   String? @db.VarChar(45)
  reason  String? @db.Text
}

//model commandlog {
//  id          String    @id @db.VarChar(45)
//  serverid    String    @db.VarChar(45)
//  channelid   String    @db.VarChar(45)
//  userid      String    @db.VarChar(45)
//  channelname String?   @db.VarChar(100)
//  message     String?   @db.LongText
//  timestamp   DateTime? @db.DateTime(0)
//  attachments String?   @db.LongText
//}

model suggestions {
  id         Int    @id @default(autoincrement())
  title      String
  suggestion String @db.LongText

  user   User   @relation(fields: [userId], references: [uid])
  userId String

  timestamp DateTime @default(now())
}

model pronoun_list {
  userid    String
  pronounId Int

  user     User     @relation(fields: [userid], references: [uid])
  pronouns pronouns @relation(fields: [pronounId], references: [id])
  @@id([userid, pronounId])
}

model pronouns {
  id     Int     @id @default(autoincrement())
  name   String? @db.VarChar(100)
  symbol String? @db.VarChar(100)
  emoji  String? @db.VarChar(100)

  list pronoun_list[]
}

model commandLog {
  id      Int    @id @default(autoincrement())
  command String

  user   User   @relation(fields: [userId], references: [uid])
  userId String

  options String? @db.LongText

  timestamp DateTime @default(now())
}
